searchState.loadedDescShard("dslab_dag", 0, "DSLab DAG\nDAG model of computation.\nSimulation configuration and execution.\nData item.\nTool for running experiments across many (dag, system. …\nNetwork model tools.\nTools for loading DAG from different file formats.\nResource model.\nDAG execution runtime.\nDAG scheduling.\nScheduler implementations.\nDistributed computing system.\nDAG task.\nDAG execution log.\nRepresents a computation consisting of multiple tasks with …\nAdds a dependency between data item and task.\nAdds data item with provided parameters and returns its id.\nAdds new task with provided parameters and returns its id.\nAdds data item as a task output and returns its id.\nReturns the argument unchanged.\nReads DAG from a file in DAX format.\nReads DAG from a file in DOT format.\nReads DAG from file in one of supported formats:\nReads DAG from a file in WfCommons json format.\nReads DAG from a file in YAML format.\nReturns data item by id.\nReturns all data items.\nReturns ids of ready tasks.\nReturns task by id.\nReturns mutable task reference by id.\nReturns all tasks.\nCalls <code>U::from(self)</code>.\nChecks whether all tasks are completed.\nCreates empty DAG.\nUpdates data item state to a provided value, updating …\nUpdates task state to a provided value, updating dependent …\nProvides a convenient API for configuring and running …\nAdds a resource with provided parameters.\nReturns the total number of created events.\nReturns the argument unchanged.\nInitializes DAG simulation.\nCalls <code>U::from(self)</code>.\nCreates simulation with provided random seed, network …\nSteps through the simulation with duration limit.\nSteps through the simulation until there are no pending …\nPerforms the specified number of steps through the …\nReturns the current simulation time.\nAverage number of task predecessors.\nAverage number of task successors.\nComputation-to-communication ratio computed as …\nLongest path in the DAG measured in sum of flops of tasks …\nNumber of levels.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSum of sizes of all DAG input data items (i.e. data items …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLevel index.\nStats for each level.\nMax of max_cores among all tasks.\nMaximum size of DAG input data item.\nMaximum size of DAG output data item.\nMaximum number of tasks that can be executed in parallel …\nMinimum of maximum task input size among all entry tasks …\nMinimum of maximum task output size among all exit tasks …\nSum of sizes of all DAG output data items (i.e. data items …\nParallelism degree computed as …\nTotal number of distinct predecessors.\nStandard deviation.\nTotal number of distinct successors.\nStats about task sizes.\nTotal number of tasks.\nTotal number of tasks.\nStats about task input sizes.\nStats about task output sizes.\nSum of flops of all tasks.\nSum of sizes of all data items.\nSum of sizes of all data transfers (differs from …\nSize of the largest level (number of tasks).\nRepresents a data item produced or consumed by DAG tasks.\nRepresents a data item state.\nDefines how data items are transferred during the DAG …\nEvery data item is automatically transferred between …\nData items are not transferred automatically, all data …\nNot ready, the task producing the data item is not …\nThe data item is produced and ready to be consumed by the …\nEvery data item is automatically transferred between …\nAdds a task that consumes the data item.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculates the data transfer time per data unit between …\nCreates new data item.\nThe size of data item in MB.\nRepresents experiment consisting of multiple simulation …\nContains result of a single simulation run.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads experiment from YAML config file.\nCreates new experiment.\nRuns experiment and returns its results.\nRepresents network model parameters.\nCreates network config with <code>ConstantBandwidthNetworkModel</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds network nodes and links (in case of topology-aware …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates network model based on stored parameters.\nReads network model configuration from YAML file.\nCreates network config with <code>SharedBandwidthNetworkModel</code>.\nCreates network config with <code>TopologyAwareNetworkModel</code>.\nNetwork bandwidth in MB/s.\nNetwork bandwidth in MB/s.\nNetwork latency in μs.\nNetwork latency in μs.\nLinks bandwidth in MB/s.\nLinks latency in μs.\nCommon settings for DAG parsers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOptions for generating cores requirements for tasks.\nOptions for generating memory requirements for tasks.\nWhether to ignore the task memory requirement (if present) …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum cores value.\nMaximum memory value.\nMinimum cores value.\nMinimum memory value.\nReference machine speed in Gflop/s (default: 10).\nWhether to use the same value for all tasks of the same …\nWhether to use the same value for all tasks of the same …\nRandom seed for cores and memory generation.\nRepresents a computing resource that can execute DAG tasks.\nContains parameters of computing resource, can be used …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMemory size in MB.\nMemory size in MB.\nReads resource configurations from YAML file.\nCPU speed in Gflop/s.\nCPU speed in Gflop/s.\nContains metrics collected from a simulation run.\nAverage CPU utilization (the ratio of core-seconds …\nAverage CPU utilization for active resources only, i.e. …\nAverage CPU utilization for used resources only, i.e. …\nMakespan expected by the scheduling algorithm (for static …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum CPU utilization (max_used_cores / total_cores).\nMaximum memory utilization (max_used_memory / …\nMaximum number of cores used at once.\nMaximum amount of memory used at once.\nAverage memory utilization (analogous to cpu_utilization).\nAverage memory utilization for active resources only …\nAverage memory utilization for used resources only …\nScheduling algorithm’s execution time (total for all …\nTotal time of data transfers over the network (in seconds).\nTotal amount of data transmitted over the network (in MB).\nTotal task execution time (in seconds).\nThe number of used resources, i.e. on which at least one …\nRepresents a DAG execution configuration.\nManages the execution of a DAG on a specified set of …\nEnables or disables trace log.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the DAG execution is completed and false …\nReturns makespan lower bound.\nReturns run stats.\nStarts DAG execution.\nReturns trace log.\nChecks that all DAG tasks are completed.\nRepresents an action ordered by the scheduler.\nExecute the task on the resource using a given <em>number</em> of …\nExecute the task on the resource using a given <em>set</em> of …\nTrait for implementing DAG scheduling algorithms.\nContains parsed scheduler params.\nTransfer data item between the specified resources. Action …\nResolves params into one of supported schedulers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates SchedulerParams from a string in the following …\nReturns scheduler parameter by name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShould be true iff on_task_state_chaged always returns …\nReturns scheduler name.\nCalled on every task state change.\nCalled once in the beginning of DAG execution.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn iterator over the variants of Self\nAn iterator over the variants of Self\nAn iterator over the variants of Self\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsider all unscheduled tasks when evaluating task …\nConsider only children of the current task when evaluating …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescribes a system as a set of resources and a network.\nReturns average time over all resources for executing one …\nReturns average time over all pairs of resources for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTask is completed.\nAllows execution on any resource except the given …\nAllows execution only on the given resources.\nWaiting for its dependencies.\nAll dependencies are satisfied, ready to be scheduled.\nRestricts task execution to some subset of resources.\nAll dependencies are satisfied and task is scheduled.\nTask is running.\nTask is scheduled, waiting for its dependencies.\nRepresents a DAG task.\nRepresents a DAG task state.\nAn iterator over the variants of Self\nAdds task input.\nAdds task output.\nThe amount of computations performed by this task in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMemory demand of this task in MB.\nCreates new task.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")