searchState.loadedDescShard("dslab_network", 0, "A library for modeling network communications. It can be …\nNetwork link.\nNetwork model interface.\nNetwork model implementations.\nSimulation component representing a network.\nNetwork node.\nRouting algorithms.\nNetwork topology.\nDefines how the link bandwidth is shared among concurrent …\nA link between two nodes in the network.\nUnique link id.\nEach transfer gets the full link bandwidth.\nThe bandwidth is shared equally between all transfers.\nLink bandwidth.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLink latency.\nCreates a new link with <code>BandwidthSharingPolicy::NonShared</code> …\nCreates a new link with <code>BandwidthSharingPolicy::Shared</code> …\nUsed bandwidth sharing policy.\nRepresents a data transfer between two simulation …\nEvent signalling the completion of data transfer.\nNetwork model interface.\nReturns the network bandwidth from node <code>src</code> to node <code>dst</code>.\nSimulation component which is receiving the data.\nNode id of data receiver.\nCompleted data transfer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique transfer id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true is the model is topology-aware.\nReturns the network latency from node <code>src</code> to node <code>dst</code>.\nSimulation component to notify when the transfer is …\nCallback for notifying topology-aware model about the …\nCallback for notifying the model about data transfer …\nData size.\nSimulation component which is sending the data.\nNode id of data sender.\nStarts data transfer.\nReturns a reference to inner network topology.\nReturns a mutable reference to inner network topology.\nNetwork model without congestion where each transfer gets …\nNetwork model where the bandwidth is shared fairly among …\nTopology-aware network model.\nNetwork model without congestion where each transfer gets …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new network model with specified bandwidth and …\nNetwork model where the bandwidth is shared fairly among …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new network model with specified bandwidth and …\nTopology-aware model which uses information about the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new network model with empty topology.\nEnables optimization which greatly improves simulation …\nSets the used routing algorithm.\nRepresents a message sent between two simulation …\nEvent signalling the message delivery.\nSimulation component representing a network.\nAdds two unidirectional links with the same parameters …\nAdds a new bidirectional link between two nodes.\nAdds a new network node.\nAdds a new unidirectional link between two nodes.\nReturns the network bandwidth between two simulation …\nContents of the message.\nSimulation component which is receiving the message.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the location (node id) of the simulation component.\nReturns the location (node id) of the simulation component …\nReturns the node id by its name.\nReturns the list of network nodes.\nReturns id of corresponding simulation component.\nUnique message id.\nPerforms initialization of network topology, such as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the network latency between two simulation …\nDelivered message.\nCreates a new network with supplied network model.\nSends an event between two simulation components, returns …\nSends a message between two simulation components, returns …\nSets the location of the simulation component <code>id</code> to the …\nSimulation component which is sending the message.\nStarts a data transfer between two simulation components, …\nA node in the network.\nUnique node id.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNode name.\nIterator which returns links on a path.\nCalculates the paths between pairs of nodes in a network.\nStatic routing algorithm which returns shortest paths (by …\nStatic routing algorithm which returns shortest paths (by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a path iterator from node <code>src</code> to node <code>dst</code>, or <code>None</code> …\nPerforms initialization of the routing algorithm based on …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStores for each node a map with its neighbors and …\nRepresents a network topology consisting of nodes …\nAdds two unidirectional links with the same parameters …\nAdds a new bidirectional link between two nodes.\nAdds a new node and returns the assigned id.\nAdds a new unidirectional link between two nodes.\nReturns the argument unchanged.\nReturns the network bandwidth of the given path.\nReturns the network latency of the given path.\nCalls <code>U::from(self)</code>.\nReturns an immutable reference to the inverted <code>NodeLinksMap</code>…\nReturns the link by its id.\nReturns the number of links.\nCreates a new empty topology.\nReturns the number of nodes.\nReturns an immutable reference to the stored <code>NodeLinksMap</code>.")