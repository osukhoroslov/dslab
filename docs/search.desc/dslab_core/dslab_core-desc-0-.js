searchState.loadedDescShard("dslab_core", 0, "DSLab Simulation Core\nEpsilon to compare floating point values for equality.\nAsynchronous programming support.\nMacro to wrap a code that will be built if async mode is …\nMacro to wrap a code that will be built if async mode is …\nEnables the use of pattern matching syntax for processing …\nSimulation components.\nAccessing simulation from components.\nSimulation events.\nEvent handling.\nLogging facilities.\nLogs a message at the debug level.\nLogs a message at the error level.\nLogs a message at the info level.\nLogs a message at the trace level.\nLogs a message at the warn level.\nSimulation configuration and execution.\nAsynchronous waiting for events.\nQueue for producer-consumer communication between …\nAsynchronous waiting for timers.\nRepresents a result of asynchronous waiting for event with …\nFuture that represents asynchronous waiting for specific …\nType of key that represents the specific details of …\nCorresponds to successful event receipt.\nCorresponds to timeout expiration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWaits for event with specified timeout and returns result …\nKey of the awaited event (None if it was not specified).\nSource of the awaited event (None if it was not specified).\nTimeout value.\nA simple implementation of unbounded multi-producer …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInserts the specified item into the queue without blocking.\nRemoves the head of the queue and returns it, waiting if …\nFuture that represents asynchronous waiting for timer …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIdentifier of simulation component.\nA facade for accessing the simulation state and producing …\nChecks whether it is safe to emit an ordered event with …\nCancels the specified event.\nCancels events that satisfy the given predicate function.\nSame as <code>cancel_events</code>, but ignores events added through …\nCreates new event with specified payload, destination and …\nCreates new event with specified payload, source, …\nCreates new immediate (zero-delay) event with specified …\nThis and all other <code>emit_ordered...</code> functions are special …\nSee <code>emit_ordered</code>.\nSee <code>emit_ordered</code>.\nSee <code>Self::emit_ordered</code>.\nSee <code>emit_ordered</code>.\nCreates new event for itself with specified payload and …\nCreates new immediate event for itself with specified …\nReturns the argument unchanged.\nReturns a random number in the specified range using the …\nReturns the identifier of component associated with this …\nCalls <code>U::from(self)</code>.\nReturns component name by its identifier.\nReturns the name of component associated with this context.\nReturns a random float in the range <em>[0, 1)</em> using the …\nReturns a random alphanumeric string of specified length …\nWaits (asynchronously) for event of type <code>T</code> from any …\nWaits (asynchronously) for event of type <code>T</code> with key <code>key</code> …\nWaits (asynchronously) for event of type <code>T</code> with key <code>key</code> …\nWaits (asynchronously) for event of type <code>T</code> with key <code>key</code> …\nWaits (asynchronously) for event of type <code>T</code> from component …\nWaits (asynchronously) for event of type <code>T</code> from self.\nRegisters a key getter function for event type <code>T</code> to be …\nReturns a random value from the specified distribution …\nWaits (asynchronously) until <code>duration</code> seconds have elapsed.\nSpawns a new asynchronous task for component associated …\nReturns the current simulation time.\nRepresentation of event.\nTrait that should be implemented by event payload.\nEvent identifier.\nTyped version of <code>crate::Event</code>.\nEvent payload.\nEvent payload.\nReturns a boxed object from a boxed trait object if the …\nConverts <code>Event</code> to <code>TypedEvent</code> of type <code>T</code>.\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nIdentifier of event destination.\nIdentifier of event destination.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique event identifier.\nUnique event identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nIdentifier of event source.\nIdentifier of event source.\nTime of event occurrence.\nTime of event occurrence.\nCancel all events related to the component.\nSpecifies which pending events are cancelled on event …\nTrait for consuming events in simulation components.\nCancel events destined to the component.\nDo not cancel events.\nCancel events produced by the component.\nAlternative trait for consuming events in simulation …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProcesses event.\nProcesses event.\nApplies the color to the string if stderr (log) goes to …\nLogs an unhandled event.\nRepresents a simulation, provides methods for its …\nRegisters the event handler implementation for component …\nRegisters the static event handler for component with …\nCancels events that satisfy the given predicate function …\nCancels events that satisfy the given predicate function.\nCreates a new simulation context with specified name.\nCreates an <code>UnboundedQueue</code> for producer-consumer …\nReturns a copy of pending events sorted by time.\nReturns the total number of created events.\nReturns the argument unchanged.\nReturns a random number in the specified range using the …\nCalls <code>U::from(self)</code>.\nReturns the identifier of component by its name.\nReturns the name of component by its identifier.\nCreates a new simulation with specified random seed.\nReturns a random float in the range <em>[0, 1)</em> using the …\nReturns a random alphanumeric string of specified length …\nRegisters a function that extracts <code>EventKey</code> from events of …\nRemoves the event handler for component with specified …\nReturns a random value from the specified distribution …\nSpawns a new asynchronous task.\nPerforms a single step through the simulation.\nSteps through the simulation with duration limit.\nSteps through the simulation until there are no pending …\nSteps through the simulation until the specified time.\nPerforms the specified number of steps through the …\nReturns the current simulation time.")