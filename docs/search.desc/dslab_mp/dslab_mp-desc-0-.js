searchState.loadedDescShard("dslab_mp", 0, "DSLab MP is a library for simulation and testing of …\nProcess context.\nSimulation events.\nLogging facilities.\nModule for testing message passing code with model …\nMessage definition.\nNetwork implementation.\nNode implementation.\nProcess trait and related types.\nRuns model checking with given settings\nSystem implementation.\nTesting facilities.\nProxy for interaction of a process with the system.\nCreates a context used in model checking mode.\nCancels a timer.\nReturns the argument unchanged.\nCreates a context used in simulation mode.\nCalls <code>U::from(self)</code>.\nReturns a random float in the range <code>[0, 1)</code>.\nSends a message to a process.\nSends a local message.\nSets a timer with overriding delay of existing active …\nSets a timer without overriding delay of existing active …\nReturns the current time from the local node clock.\nMessage is received.\nTimer is fired.\nName of destination process.\nName of destination node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMessage identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReceived message.\nName of process that set the timer.\nName of sender process.\nName of sender node.\nTimer name.\nDropping of incoming messages for a node is enabled.\nDropping of outgoing messages for a node is enabled.\nLink between a pair of nodes is disabled.\nLink between a pair of nodes is enabled.\nRepresents a logged event.\nImplements logging of events to console and optionally to …\nModel checking session is started.\nNetwork partition is occurred between two groups of nodes.\nNetwork is reset to normal state (all links are working).\nDropping of incoming messages for a node is disabled.\nDropping of outgoing messages for a node is enabled.\nProcess state is updated.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if event is <code>LogEntry::McLocalMessageSent</code>.\nChecks if event is <code>LogEntry::McMessageDropped</code>.\nChecks if event is <code>LogEntry::McMessageDuplicated</code>.\nChecks if event is <code>LogEntry::McLocalMessageReceived</code>.\nChecks if event is <code>LogEntry::McMessageSent</code>.\nChecks if event is <code>LogEntry::McTimerFired</code>.\nChecks if event is <code>LogEntry::McTimerSet</code>.\nPrints log entry to console.\nReturns a reference to a vector with all logged events.\nFirst group of nodes.\nSecond group of nodes.\nString representation of process state.\nModel checking error.\nImplementation of events used in model checking.\nModel checker configuration and launching.\nNetwork implementation for model checking mode.\nStandard predicate implementations that can be used in …\nDefinition of model checking state.\nImplementations of model checking search strategies.\nMain logic and configuration of model checking strategy.\nSystem implementation for model checking mode.\nStores information about an error found by model checking.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the error message.\nCreates new model checking error.\nPrints error trace.\nReturns the execution trace which led the system to …\nDefines possible orderings of events in the system.\nSpecial events used in model checking instead of standard …\nIdentifier of McEvent.\nThe event of corrupting a message. Created by model …\nThe event of dropping a message. Created by the model …\nThe event of duplicating a message. Created by model …\nThe event of receiving a non-local message by a process.\nMessage receive events always precede the timers (kind of …\nEvents can be arbitrarily reordered (default mode).\nThe event of cancelling a timer.\nThe event of a timer expiration.\nModifies event so it won’t be duplicated in future.\nDuplicates the MessageReceived event with decreased …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts McEvent to LogEntry.\nThe message after corruption.\nThe name of the process that received the message.\nThe name of the process the message was sent to.\nThe name of the process the message was sent to.\nThe name of the process the message was sent to.\nThe message itself.\nThe dropped message itself.\nThe duplicated message itself.\nThe original message.\nNetwork delivery options for the message.\nThe process to which the timer belongs to.\nThe process to which the timer belongs to.\nThe id of original MessageReceived event.\nThe id of original MessageReceived event.\nThe id of original MessageReceived event.\nThe name of the process that sent the message.\nThe name of the process that sent the message.\nThe name of the process that sent the message.\nThe name of the process that sent the message.\nThe timer name.\nThe timer name.\nThe timer duration.\nMain class of (and entrypoint to) the model checking …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new model checker with the specified strategy …\nRuns model checking and returns the result on completion.\nRuns model checking from a set of initial states.\nRuns model checking from a set of initial states after …\nRuns model checking after applying callback.\nSpecifies expected network behaviour regarding delivery of …\nRepresents a network that transmits messages between …\nMessage will be received exactly once without corruption …\nMessage delivery may be subject to some failures\nDisables link between nodes <code>from</code> and <code>to</code> by dropping all …\nDisconnects a node from the network.\nEnables dropping of incoming messages for a node.\nEnables dropping of outgoing messages for a node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the name of node hosting the process.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the maximum network delay.\nCreates a network partition between two groups of nodes.\nResets the network links by enabling all links and …\nSets the message corruption probability.\nSets the message drop probability.\nSets the message duplication probability.\nSpecifies whether the message can be corrupted.\nSpecifies whether the message can be dropped.\nSpecifies the maximum number of message duplicates.\nCollects select states that should be collected for …\nGoals check if state is final.\nInvariants check whether state is correct or not.\nPrunes cut execution branches if further analysis is …\nCombines multiple collect functions by returning <code>true</code> iff …\nCombines multiple collect functions by returning <code>true</code> iff …\nChecks if trace to given state has at least <code>n</code> events …\nCollects states where the number of events matching the …\nChecks if the given process produced <code>n</code> local messages.\nChecks if current state has no more active events.\nChecks if current state’s depth exceeds the given value.\nCombines multiple goal functions by returning <code>Some()</code> iff …\nThis goal is used when start state is also a final state.\nCombines multiple goal functions by returning <code>Some()</code> iff …\nChecks if current state is on given depth.\nChecks if current run trace has at least <code>n</code> events matching …\nChecks if the given process produced <code>n</code> local messages.\nChecks if current state has no more active events.\nCombines multiple invariant functions by returning <code>Ok</code> iff …\nVerifies that the set of local messages delivered by a …\nChecks that state depth does not exceed the given value.\nChecks that state depth for current run does not exceed …\nChecks that overall run duration does not exceed the given …\nCombines multiple prune functions by returning <code>Some()</code> iff …\nPrunes state with at least <code>n</code> events matching the predicate.\nPrunes states where the number of events matching the …\nPrunes states where the number of events matching the …\nPrunes states where processes are mentioned in any …\nPrunes states where some process has sent more messages …\nPrunes states with depth exceeding the given value.\nStores comprehensive information about the state of the …\nCreates a slice of trace that represents current model …\nDepth of the state in the state graph (i.e. the number of …\nList of events waiting for delivery.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nState of the system network\nCreates a new state with the specified events in the …\nStates of nodes in the system.\nSequence of events corresponding to a system execution …\nImplementation of model checking BFS search strategy.\nImplementation of model checking DFS search strategy.\nThe search strategy based on the BFS algorithm.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe search strategy based on the DFS algorithm.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if given state should be collected. Returns true if …\nExecution with verbose output intended for debugging …\nDefault execution mode with reduced output intended for …\nDoes not store any data about the previously visited …\nContains the error value\nHolds either <code>McEvent</code> or <code>McEventId</code>.\nDefines the mode in which the model checking algorithm is …\nStores the visited states and checks for equality of …\nChecks if the given state is the final state, i.e. all …\nChecks if some invariant holds in the given state. Returns …\nResult of model checking run - statistics for successful …\nModel checking execution statistics.\nContains the success value\nStores the hashes of visited states and checks for …\nDecides whether to prune the executions originating from …\nTrait with common functions for different model checking …\nConfiguration of model checking strategy.\nAlternative implementations of storing the previously …\nAdds the event to pending events list.\nBuilds a new strategy instance.\nApplies user-defined checking functions to the system …\nReturns the collect function.\nSets collect function.\nStates that were collected with Collect predicate\nApplies corruption to the Message.\nCreates MessageReceived event with corrupted msg.\nPrints the log for particular event if the execution mode …\nDuplicates event from pending events list by id. The new …\nReturns the used execution mode.\nSets execution mode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the goal function.\nSets goal function.\nChecks if the system state was visited before.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the invariant function.\nSets invariant function.\nMarks the system state as already visited.\nAdds new information to model checking execution …\nExplores the possible system states reachable from the …\nReturns the prune function.\nSets prune function.\nResets the internal state so that the strategy can be …\nLaunches the strategy execution.\nApplies the specified event to the system, calls …\nCallback which in called whenever a new system state is …\nSet collect predicate.\nReturns the model checking execution stats.\nCounters for statuses run achieved\nTakes the event from pending events by id.\nReturns the visited states set.\nSets visited states cache.\nModels distributed system consisting of multiple nodes …\nUsed for specifying delays.\nCrashes the specified node.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a mutable reference to <code>McNetwork</code>.\nCreates a new system.\nReturns a list of node names.\nSends a local message to the process.\nSets the used <code>EventOrderingMode</code>.\nRepresents a message.\nMessage data (payload).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a message with JSON serialized payload.\nCreates a message.\nReturns the message size as the sum of message type and …\nMessage type.\nRepresents a network that transmits messages between …\nAdds a new node to the network.\nConnects a node to a network.\nReturns the message corruption probability.\nDisables link between nodes <code>from</code> and <code>to</code> by dropping all …\nReturns disabled links.\nDisconnects a node from the network.\nEnables dropping of incoming messages for a node.\nEnables dropping of outgoing messages for a node.\nReturns the message drop probability.\nReturns the message duplication probability.\nEnables link between nodes <code>from</code> and <code>to</code>.\nReturns the argument unchanged.\nReturns nodes with enabled dropping of incoming messages.\nReturns nodes with enabled dropping of outgoing messages.\nCalls <code>U::from(self)</code>.\nCreates a network partition between two groups of nodes.\nReturns the maximum network delay.\nReturns the total number of messages sent via the network.\nDisables dropping of incoming messages for a node.\nDisables dropping of outgoing messages for a node.\nReturns a map with process locations (process -&gt; node).\nResets the network links by enabling all links and …\nSets the message corruption probability.\nSets the fixed network delay.\nSets the minimum and maximum network delays.\nSets the message drop probability.\nSets the message duplication probability.\nSets the process location.\nReturns the total size of messages sent via the network.\nEvent log entry as a pair of time and event.\nRepresents a node which is connected to the network and …\nOverride the existing timer delay.\nRepresents an event happened in a process.\nDo not override the existing timer delay.\nSpecifies the behaviour of timer set in the presence of …\nSpawns new process on the node.\nMarks the node as crashed.\nEvent happened in a process.\nReturns the event log for the process.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a local process by its name.\nIdentifier of simulation component.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the node is crashed.\nReturns a copy of the local messages produced by the …\nReturns the maximum size of process inner data observed so …\nReturns the node name.\nUnique node name.\nReturns the names of all local processes.\nReads and returns the local messages produced by the …\nReturns the number of messages received by the process.\nRecovers the node after crash.\nSends a local message to the process.\nReturns the number of messages sent by the process.\nSets the node clock skew.\nSets the state of the process.\nEvent time.\nA trait for process implementations.\nA trait for implementations of process state.\nEmpty process state.\nProcess state encoded by a string.\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nTests for <code>self</code> and <code>other</code> values to be equal.\nReturns the argument unchanged.\nComputes a hash of process state using the passed hasher.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nReturns the maximum size of process inner data observed so …\nCalled when a <em>local</em> message is received.\nCalled when a message is received.\nCalled when a timer fires.\nRestores the process state.\nReturns the process state.\nModels distributed system consisting of multiple nodes …\nAdds a node to the system.\nAdds a process executing on the node.\nCrashes the specified node.\nReturns the event log for the process.\nReturns the argument unchanged.\nReturns a random number in the specified range using the …\nReturns a mutable reference to the node.\nReturns an immutable reference to the node.\nCalls <code>U::from(self)</code>.\nReturns a copy of the local messages produced by the …\nReturns a mutable reference to system logger.\nReturns the maximum size of process inner data observed so …\nReturns a mutable reference to network.\nCreates a system with specified random seed.\nChecks if the node is crashed.\nReturns a list of node names.\nChecks if the node hosting the process is crashed.\nReturns the name of node hosting the process.\nReturns the names of all processes in the system.\nReturns a random alphanumeric string of specified length …\nReads and returns the local messages produced by the …\nReturns the number of messages received by the process.\nRecovers the previously crashed node.\nSends a local message to the process.\nReturns the number of messages sent by the process.\nSets local clock skew of the node.\nReturns the reference to inner simulation.\nPerforms a single step through the simulation.\nSteps through the simulation with duration limit.\nSteps through the simulation until the process produces …\nSimilar to <code>Self::step_until_local_message</code> but with …\nSimilar to <code>Self::step_until_local_message</code> but with …\nSteps through the simulation until there are no pending …\nPerforms the specified number of steps through the …\nReturns the current simulation time.\nCreates a system with logging events to file.\nContains the error value\nContains the success value\nA test result.\nA set of tests supposed to be run together.\nAdds a test to the suite.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an empty test suite.\nExecutes the test suite by running each test in turn.\nRuns the specified test and prints its result.")