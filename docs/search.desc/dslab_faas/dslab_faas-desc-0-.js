searchState.loadedDescShard("dslab_faas", 0, "DSLab FaaS\nColdstart-reducing policies that govern container …\nExperiment configuration (YAML-serializable).\nContainer model and host-level container manager.\nPlatform controller.\nCPU sharing models.\nA component that chooses a host for deploying a new …\nSimulation events.\nVarious implementations of DSLab FaaS traits, including …\nFunction and application models.\nHost model.\nFunction invocation.\nA component that manages incoming invocations on a host.\nUtilities for running multiple experiments in parallel.\nResource model.\nScheduler trait and several simple implementations.\nFaaS simulation.\nMetrics obtained from simulation.\nWorkload trace trait.\nVarious utility structs.\nHelper trait to convert ColdStartPolicy Box to Rc.\nA policy that governs keepalive and prewarming.\nColdstart policy with fixed keepalive and prewarm windows.\nA decision regarding keepalive of some container.\nA new keepalive window <code>w</code> is chosen for the container. The …\nNothing changes, the container will be deallocated after …\nThe container must be terminated right now.\nConverts Box to Rc.\nAutomatic implementation.\nCreates <code>ColdStartPolicy</code> from a string containing its name …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates policy from a map of strings containing policy …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines delay before container deallocation.\nCreates new FixedTimeColdStartPolicy.\nPrewarm = x &gt; 0 =&gt; destroy container, deploy new container …\nReturns a string with policy description.\nThis function allows tuning policy on finished invocations.\nSimulation config. It implements Default trait so that you …\nFunctions that create algorithm implementation from a …\nDescribes a host in the simulation.\nYAML-serializable config\nSimilar to <code>HostConfig</code>, but is YAML-serializable.\nDescribes a resource in the simulation.\n<code>crate::coldstart::ColdStartPolicy</code> implementation.\n<code>crate::coldstart::ColdStartPolicy</code> name.\nCreates <code>crate::coldstart::ColdStartPolicy</code> from a string.\nHost CPU cores.\nHost CPU cores.\nNumber of such hosts in the system.\n<code>crate::cpu::CpuPolicy</code> implementation.\n<code>crate::cpu::CpuPolicy</code> name.\nCreates <code>crate::cpu::CpuPolicy</code> from a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates Config from RawConfig using provided resolvers.\nSimilar to <code>Self::from_raw</code>, but takes resolvers as separate …\nCreates Config from YAML file using provided resolvers.\nHost data.\nRaw host data.\n<code>crate::deployer::IdleDeployer</code> implementation.\n<code>crate::deployer::IdleDeployer</code> name.\nCreates <code>crate::deployer::IdleDeployer</code> from a string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>crate::invoker::Invoker</code> implementation.\n<code>crate::invoker::Invoker</code> name.\nCreates <code>crate::invoker::Invoker</code> from a string.\nResource name.\nParses map with options from string.\nResource quantity.\nHost resources.\nRaw resources.\n<code>crate::scheduler::Scheduler</code> implementation.\n<code>crate::scheduler::Scheduler</code> name.\nCreates <code>crate::scheduler::Scheduler</code> from a string.\nContainer model.\nManages containers on a single host.\nStatus of a container in the simulation.\nContainer is being deployed.\nContainer is up, but isn’t executing anything.\nIterates over all containers that can run another …\nContainer is executing one or more invocations.\nContainer is terminated, but still present. Terminated …\nReturns active invocations count.\n<code>crate::function::Application</code> id.\nChecks whether it is possible to create a new container …\nCounts reserved invocations for a deploying container.\nCPU share of the container.\nDecrements active invocations count.\nDeletes a container.\nContainer deployment time.\nContainer end event.\nEnds a running invocation on the container.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to a container specified by <code>id</code> if it …\nReturns a mutable reference to a container specified by <code>id</code> …\nReturns a mutable reference to the map that stores all …\nReturns an iterator over running containers that can …\nReturns total amount of a resource.\nId of a <code>crate::host::Host</code>, on which the container is …\nContainer id.\nIncrements active invocations count.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet of running invocations.\nTime of last state change.\nMoves a container to full list.\nCreates new ContainerManager on a specified host.\nCreates new PossibleContainerIterator.\nReserves a deploying container for a new invocation.\nResources allocated for the container.\nStarts a new invocation on the container.\nNumber of invocations started on this container.\nContainer status.\nReturns and removes reserved invocations for a deploying …\nTries to deploy a new container for given app.\nMoves a container to free list if it was full.\nResponsible for handling incoming invocation requests and …\nRegisters a new host in the controller.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates new controller.\nCPU shares of active containers may exceed the number of …\nJust a wrapper over <code>CpuPolicy</code>.\nCpuPolicy governs CPU sharing, computes invocation …\nThis policy ignores contention for CPU resources. All …\nCPU shares of active containers should not exceed the …\nNumber of CPU cores.\nCreates <code>CpuPolicy</code> from a string containing its name and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the current CPU load.\nReturns current CPU load.\nReturns a clean initialized instance of the policy.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates new Cpu.\nCreates new IsolatedCpuPolicy.\nCreates new ContendedCpuPolicy.\nThis method is called whenever an invocation on this CPU …\nCalled when an invocation stops running.\nThis method is called whenever there is a new invocation …\nCalled when a new invocation starts running.\nBasicDeployer deploys new container on the first host with …\nIdleDeployer chooses a host to deploy new idle container …\nLocalityBasedDeployer picks a host based on application …\nCreates <code>IdleDeployer</code> from a string containing its name and …\nChooses a host for a new container.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates new LocalityBasedDeployer from a map of strings …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates new LocalityBasedDeployer with given hasher and …\nReturns a string with deployer description.\nAn idle container must be destroyed.\nA deploying container is ready to start running.\nA new prewarmed container is deployed.\nA running invocation stops executing.\nA new invocation starts executing.\nSimulation ends.\nExpected number of invocations on host. If the real number …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction id.\nContainer id.\nContainer id.\nHost id.\nInvocation id.\nInvocation id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunctions for parsing Azure Functions 2019 trace and …\nFunctions for parsing Azure Functions 2021 trace and …\nScheduler implementation from “Hermod: principled and …\nColdstart policy implementation from “Serverless in the …\nOpenDC FaaS trace format parser.\nAdditional resolvers for YAML configs.\nSynthetic trace generator.\nExperiment generator will choose <code>count</code> random apps with …\nAzure trace application data.\nStruct with Azure 2019 trace settings.\nAzure trace.\nFor each 1-minute bucket select each starting time …\nGenerator of invocation durations.\nGenerate invocations from empirical distribution.\nAzure trace function data.\nGenerate duration from Lognormal distribution fitted to …\nSimple duration generator from quantiles.\nFit Poisson process to buckets and generate the …\nGenerate duration from Lognormal(-0.38, 2.36).\nGenerator of invocation arrival times.\nApplication id.\nThis option controls which apps to use for trace …\nApplication data.\nApplication cold start latency.\nCold start latency, currently it’s the same for all apps.\nApplication concurrency level, same for all applications.\nThis option sets concurrency level for all apps in the …\nRandom apps count.\nThis option controls the method used to generate execution …\nThis option forces trace generator to use given amount of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLeft quantile.\nApplication memory requirement.\nName of memory resource.\nThis option sets name for the memory resource.\nCreates new AppPreference.\nThis function parses Azure Functions 2019 trace and …\nThis option sets the seed used to initialize random …\nRight quantile.\nIf <code>rps</code> is not None, trace generator attempts to scale …\nSimulation end time.\nThis option controls the method used to generate start …\nSimulation time period in minutes (only integer numbers …\nThis option allows skipping an integer number of minutes …\nRequest data.\nValidates AppPreference.\nStruct with Azure 2021 trace settings.\nAll apps use fixed amount of memory.\nGenerator of application memory requirements.\nBurr fit from Serverless in the Wild paper. c = 11.652, k …\nSamples one value from Burr(c, k, lambda) distribution.\nCold start latency, currently it’s the same for all apps.\nThis option sets concurrency level for all apps in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis option controls the method used to generate app …\nThis option sets name for the memory resource.\nThis function parses Azure Function 2021 trace and …\nThis option sets the seed used to initialize random …\nSimulation time period in seconds.\nThis option allows skipping a number of seconds from the …\nRefer to https://dl.acm.org/doi/abs/10.1145/3542929.3563468…\nReturns the argument unchanged.\nCreates scheduler from a map of strings containing …\nCalls <code>U::from(self)</code>.\nCreates new HermodScheduler.\nRefer to …\nAutomatic implementation.\nReturns the argument unchanged.\nCreates policy from a map of strings containing policy …\nCalls <code>U::from(self)</code>.\nCreates new HybridHistogramPolicy.\nOne sample from OpenDC trace.\nA trace of samples for a function.\nOpenDC trace request iterator.\nOpenDC trace.\nStruct with settings for reading OpenDC trace.\nApplication cold start delay, same for all applications.\nApplication cold start delay, same for all applications.\nApplication concurrency level, same for all applications.\nApplication concurrency level, same for all applications.\nProvisioned CPU.\nUsed CPU.\nExecution time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction traces.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of invocations at this timestamp.\nProvisioned memory.\nUsed memory.\nName of memory resource.\nName of memory resource.\nCreates new OpenDC request iterator.\nReads OpenDC trace.\nSimulation end time.\nTimestamp.\nLike <code>crate::coldstart::default_coldstart_policy_resolver</code>, …\nLike <code>crate::scheduler::default_scheduler_resolver</code>, but …\nGenerator of invocation arrival times.\nGenerator of invocation durations.\nEqual durations.\nGenerates equally spaced arrival times with given interval …\nType erased version of rand::Distribution trait.\nExplicitly given arrivals.\nExplicitly given durations.\nFixed requirement.\nGenerator of container memory requirements.\nRandom arrival times.\nRandom durations.\nRandom requirements.\nSynthetically generated trace.\nApp generation settings.\nSynthetic trace generation settings.\nTime interval that will contain all arrival times.\nApplication generator configs.\nArrival times generator.\nContainer cold start latency.\nApp concurrency level.\nContainer CPU share.\nInvocation durations generator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates synthetic trace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContainer memory requirement generator.\nMemory resource name.\nRandom generator seed.\nGenerate a random value of T, using rng as the source of …\nAn application shares a common container image. Functions …\nA single function of an application.\nStores information about apps and functions.\nAdds a new <code>Application</code> and returns its <code>id</code>. Note: the …\nAdds a new <code>Application</code> consisting of a single <code>Function</code> and …\nAdds a new <code>Function</code> and returns its <code>id</code>.\nApplication id.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to an <code>Application</code> by its <code>id</code>.\nReturns a reference to an <code>Application</code> that owns a <code>Function</code> …\nReturns maximum possible number of invocations that can be …\nReturns CPU share required by containers of this …\nReturns the time needed to deploy one container of this …\nReturns a reference to a <code>Function</code> by its <code>id</code>.\nReturns resources required by containers of this …\nApplication id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates new application.\nCreates new function.\nHost model.\nReturns the amount of active invocations on this host.\nChecks whether the host can allocate given resources.\nChecks whether the host can invoke a function of the given …\nReturns the argument unchanged.\nReturns the number of CPU cores.\nReturns current CPU load.\nReturns the total amount of a resource.\nCalls <code>U::from(self)</code>.\nPasses an invocation to the <code>crate::invoker::Invoker</code>, which …\nCreates new host.\nReturns the amount of queued invocations on this host.\nReturns the amount of all existing (active + queued) …\nTries to deploy a new container for the given application.\nUpdates wasted resources for idle containers.\nInvocation is finished.\nFunction invocation.\nStores information about function invocations.\nInvocation status.\nInvocation is registered, but simulation time has not …\nInvocation is queued at one of the invokers.\nInvocation is running.\nInvocation is waiting for the assigned container to start.\nAdds a new invocation to the registry and returns its <code>id</code>.\n<code>crate::function::Application</code> id.\nInvocation request arrival time.\n<code>crate::container::Container</code> id if the invocation was …\nInvocation duration.\nReturns invocation execution time (finish - start).\nExecution finish time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>crate::function::Function</code> id.\n<code>crate::host::Host</code> id if the invocation was scheduled on …\nInvocation id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the registry is empty.\nReturns the number of invocations in the registry.\nReturns invocation response time (finish - arrival).\nExecution start time.\nInvocation status.\nReturns invocation wait time (start - arrival).\nInvocation will start running on a cold container after it …\nPreviously-queued invocation that is finally able to be …\n<code>FIFOInvoker</code> repeatedly tries to invoke the oldest queued …\nInvoker handles invocations at host level. It chooses …\nInvoker’s decision on new function invocation.\n<code>NaiveInvoker</code> iterates over all queued invocations and …\nInvocation is queued on the invoker because the invoker can…\nInvoker rejects the invocation. Note: This value is used …\nInvocation will instantly start running on a warm …\nContainer id.\nCreates <code>Invoker</code> from a string containing its name and …\nDeploying delay if the invocation will be executed on a …\nTry to invoke some of the queued functions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInvocation id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvoke or queue new invocation.\nCreates new DequeuedInvocation.\nCreates new NaiveInvoker.\nCreates new FIFOInvoker.\nReturns invocation queue length.\nReturns a string with invoker description.\nSimilar to <code>crate::config::Config</code>, but ensures that all …\nSimilar to <code>crate::config::HostConfig</code>, but only accepts …\n<code>crate::coldstart::ColdStartPolicy</code> implementation.\nHost CPU cores.\n<code>crate::cpu::CpuPolicy</code> implementation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHost configuration data.\n<code>crate::deployer::IdleDeployer</code> implementation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>crate::invoker::Invoker</code> implementation.\nRuns parallel simulations in a thread pool with a separate …\nRuns parallel simulations in a thread pool with <code>n_workers</code> …\nSimilar to <code>parallel_simulation</code>, but for raw configs.\nSimilar to <code>parallel_simulation_n_workers</code>, but for raw …\nSimilar to <code>parallel_simulation</code>, but for YAML configs.\nSimilar to <code>parallel_simulation_n_workers</code>, but for YAML …\nHost resources.\n<code>crate::scheduler::Scheduler</code> implementation.\nA simple strictly isolated renewable resource.\nA model of a container or other entity that consumes …\nTransforms resource name to resource id in current …\nA model of a host or other entity that provides several …\nRequirement for allocating specified amount of a resource.\nAllocates free resource.\nAllocates resources required by the consumer.\nChecks whether it is possible to allocate given amount of …\nChecks whether it is possible to allocate resources …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns amount of free resource.\nReturns reference to a resource specified by <code>id</code> if it …\nResource id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over resource requirements of the consumer.\nCreates new resource.\nCreates new ResourceRequirement.\nCreates new ResourceProvider.\nCreates new ResourceConsumer.\nCreates new ResourceProvider without resources.\nCreates new ResourceConsumer without resources.\nRequired resource quantity.\nReleases allocated resource.\nReleases resources allocated by the consumer.\nSame as <code>Self::try_resolve</code>, but creates new resource if it …\nTransforms name to id if this resource exists.\nHashes application ids, used to map applications to hosts.\nChooses the first invoker that can hotstart the …\nChooses a host with the least CPU usage.\nPicks a host based on the application hash. In case host …\nPicks a host uniformly at random.\nChooses hosts in a circular fashion.\nChooses a host to run new invocation of some function from …\nCreates <code>Scheduler</code> from a string containing its name and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates scheduler from a map of strings containing …\nCreates scheduler from a map of strings containing …\nCreates scheduler from a map of strings containing …\nHashes application id.\nHash function, accepts application id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHasher name.\nCreates new ApplicationHasher.\nCreates new LocalityBasedScheduler.\nCreates new RandomScheduler.\nCreates new LeastLoadedScheduler.\nCreates new RoundRobinScheduler.\nChooses a host.\nReturns a string with scheduler description.\nMain FaaS simulation class.\nAdds a new <code>crate::function::Application</code>.\nAdds a new <code>crate::function::Application</code> with a single …\nAdds a new <code>crate::function::Function</code>.\nAdds a new <code>crate::host::Host</code>.\nCreates new resource.\nCreates new resource requirement.\nReturns number of events in the simulation.\nReturns the argument unchanged.\nReturns invocation by its id.\nReturns all invocations with ids in given range.\nReturns global metrics.\nCalls <code>U::from(self)</code>.\nReturns global invocation metrics.\nReturns a consecutive range of indices of new invocations. …\nCreates new simulation.\nSends a single invocation request.\nThis function provides a way to send invocation requests …\nSimulation end event is useful in case you have a …\nReturns simulation metrics.\nMakes one simulation step.\nMakes simulation steps for given time duration.\nMakes simulation steps until no events remain.\nMakes given number of simulation steps.\nResolves resource name into <code>id</code> if it exists.\nAll metrics computed by the simulator.\nMetrics related to invocations and execution speed.\nStatistical sample.\nMain metrics storage of the simulator, stores metrics on …\nAbsolute execution slowdown.\nAbsolute total execution slowdown (includes queueing and …\nAdds a new element to the sample.\nApplication-wise invocation metrics.\nReturns biased sample variance.\nThis metric counts latency of cold starts only, warm …\nNumber of cold starts.\nSame as extend_inplace, but makes a copy.\nExtends current metric with zeros to given number of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction-wise invocation metrics.\nGlobal metrics.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvocation-related metrics.\nNumber of started invocations.\nChecks whether the sample is empty.\nReturns the number of elements in this sample.\nReturns maximum element in this sample.\nReturns the arithmetic mean of elements in this sample.\nReturns minimum element in this sample.\nUpdates metrics on a cold start.\nUpdates metrics on a cold start.\nUpdates metrics on a cold start.\nUpdates metrics on a new invocation.\nUpdates metrics on a new invocation.\nUpdates metrics on a new invocation.\nReturns k-th ordered statistic of the sample.\nPrints metrics summary to stdout.\nReturns q-th sample quantile, 0 &lt;= q &lt;= 1. Estimation …\nMeasures queueing time of requests stuck in the invoker …\nRelative execution slowdown.\nRelative total execution slowdown (includes queueing and …\nReturns the sum of elements in this sample.\nConverts sample to float vector.\nReturns unbiased sample variance.\nUpdates metrics on invocation end.\nUpdates metrics on invocation end.\nUpdates metrics on invocation end.\nUpdates metrics on a dequeued invocation.\nUpdates metrics on a dequeued invocation.\nUpdates metrics on a dequeued invocation.\nUpdates wasted resources.\nUpdates wasted resources.\nReturns the slice with the elements of this sample.\nReturns biased/unbiased sample variance.\nIntegral of resources wasted by idle containers over time.\nRaw application data.\nRaw invocation request data.\nWorkload trace.\nReturns an iterator over the applications.\nMaximum number of invocations that can run simultaneously …\nCPU share required by containers of this application.\nTime needed to deploy one container of this application.\nHost resources required by containers of this application.\nInvocation duration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an iterator over the functions.\nFunction id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether the requests produced by <code>request_iter</code> …\nCreates new ApplicationData.\nReturns an iterator over the invocation requests.\nOptionally returns simulation end time.\nRequest arrival time.\nA simple incrementing counter.\nSimilar to <code>VecMap</code>, but returns the default value instead …\nIndexMap with faster hash function.\nIndexSet with faster hash function.\nA simple mapping type for storing (key, value) pairs where …\nIterator over <code>VecMap</code> (key, value) pairs.\nReturns current counter value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value specified by id if exists.\nReturns a reference to the value speficied by id if exists.\nReturns a mutable reference to the value specified by id …\nReturns a mutable reference to the value speficied by id …\nPost-increments the counter.\nInserts a new value into the map.\nInserts a new value into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns (key, value) pairs iterator.\nReturns an iterator over map values. To iterate over (key, …\nCreates new VecMapIterator.")